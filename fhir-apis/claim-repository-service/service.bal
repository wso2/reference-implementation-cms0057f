// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import ballerina/http;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhir.r4.davincipas;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service / on new http:Listener(9089) {

    // Claim repository service
    isolated resource function post fhir/r4/ClaimRepo/Claim(davincipas:PASClaim payload) returns error|http:Response {
        r4:FHIRError|davincipas:PASClaim|error result = check addNewPASClaim(payload);

        http:Response response = new;
        if (result is r4:FHIRError) {
            response.setJsonPayload(result.message());
            response.statusCode = http:STATUS_BAD_REQUEST;

        } else if (result is error) {
            response.setJsonPayload("Error occurred while creating the claim");
            response.statusCode = http:STATUS_BAD_REQUEST;
        } else {
            response.setJsonPayload(result.toJson());
            response.statusCode = http:STATUS_CREATED;
        }

        return response;
    }

    isolated resource function get fhir/r4/ClaimRepo/Claim/[string id]() returns davincipas:PASClaim|error? {
        return getPASClaimByID(id);
    }

    isolated resource function get fhir/r4/ClaimRepo/Claim() returns davincipas:PASClaim[]|error? {
        return getAllPASClaims();
    }

    isolated resource function delete fhir/r4/ClaimRepo/Claim/[string id]() returns error? {
        return deletePASClaimByID(id);
    }

    // ClaimResponse repository service        
    isolated resource function post fhir/r4/ClaimRepo/ClaimResponse(davincipas:PASClaimResponse payload) returns error|http:Response {
        r4:FHIRError|davincipas:PASClaimResponse|error? result = check addNewPASClaimResponse(payload);

        http:Response response = new;
        if (result is r4:FHIRError || result is r4:FHIRParseError) {
            response.setJsonPayload(result.message());
            response.statusCode = http:STATUS_BAD_REQUEST;
        } else if (result is error) {
            response.setJsonPayload("Error occurred while creating the claim response");
            response.statusCode = http:STATUS_BAD_REQUEST;
        } else {
            response.setJsonPayload(result.toJson());
            response.statusCode = http:STATUS_CREATED;
        }

        return response;
    }

    isolated resource function get fhir/r4/ClaimRepo/ClaimResponse/[string id]() returns davincipas:PASClaimResponse|error? {
        return getPASClaimResponseByID(id);
    }

    isolated resource function get fhir/r4/ClaimRepo/ClaimResponse() returns davincipas:PASClaimResponse[]|error? {
        return getAllPASClaimResponses();
    }

    isolated resource function delete fhir/r4/ClaimRepo/ClaimResponse/[string id]() returns error? {
        return deletePASClaimResponseByID(id);
    }
}
