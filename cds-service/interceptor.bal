import ballerina/http;
import ballerina/lang.regexp;
import ballerinax/health.fhir.cds;

// AUTO-GENERATED FILE.
//
// This file is auto-generated by the CDS health tool.
// We do not recommend to modify it.

service class ResponseErrorInterceptor {
    *http:ResponseErrorInterceptor;

    remote function interceptResponseError(error err, http:Response response) returns http:Response {
        if (response.statusCode == 400) {
            string message = err.message();
            regexp:Span? search = regexp:find(re `field\s'[^']*'\scannot\sbe\sadded\sto\sthe\sclosed\srecord`, message);
            if search is regexp:Span {
                string[] split = regexp:split(re `'`, search.substring());
                if (split.length() > 1) {
                response.setJsonPayload({
                "message": string `Unknown field ${split[1]}`
                }, "application/json");
                }
            }
        } else {
            response.setJsonPayload({
                "message": err.message()
            }, "application/json");
        }
        return response;
    }
}


service class RequestInterceptor {
    *http:RequestInterceptor;

    resource function 'default cds\-services/[string hook_id](http:RequestContext ctx, http:Request re) returns http:NextService|http:Response|error? {
        json|http:ClientError jsonPayload = re.getJsonPayload();
        if jsonPayload is http:ClientError {
            cds:CdsError cdsError = cds:createCdsError("Provided payload is not a JSON", 400);
            return cds:cdsErrorToHttpResponse(cdsError);
        }

        cds:CdsRequest|error cdsRequest = jsonPayload.cloneWithType(cds:CdsRequest);
        if cdsRequest is error {
            regexp:Span? search = regexp:find(re `field\s'[^']*'\scannot\sbe\sadded\sto\sthe\sclosed\srecord`, cdsRequest.message());
            if search is regexp:Span {
            string[] split = regexp:split(re `'`, search.substring());
            if (split.length() > 1) {
                cds:CdsError cdsError = cds:createCdsError(
                string `Unknown field ${split[1]}`,
                400,
                description = "Provided payload is not a proper CDS request. Please validate your request payload with the format mentioned in the official specification: https://cds-hooks.hl7.org/2.0/#http-request_1"
                );
                return cds:cdsErrorToHttpResponse(cdsError);
            }
        }

        cds:CdsError cdsError = cds:createCdsError(
        "Provided payload is not a proper CDS request.",
        400,
        description = "Please validate your request payload with the format mentioned in the official specification: https://cds-hooks.hl7.org/2.0/#http-request_1");
        return cds:cdsErrorToHttpResponse(cdsError);
    }

    cds:CdsRequest|http:Response preProcessingResult = preProcessing(hook_id, cdsRequest);
    if preProcessingResult is http:Response {
        return preProcessingResult;
    }

    return check ctx.next();
    }
}
