// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/http;
import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhir.r4.davincidtr210;
import ballerinax/health.fhir.r4.international401;
import ballerinax/health.fhir.r4.parser;

isolated Questionnaire[] questionnaires = [];
isolated int createOperationNextIdQuestionnaire = 5;

isolated international401:Parameters[] parameters = [];
isolated int createOperationNextIdQuestionnairePackage = 33;

public isolated function questionnairePackage(international401:Parameters payload) returns r4:FHIRError|international401:Parameters {
    international401:Parameters|error parameters = parser:parseWithValidation(payload.toJson(), international401:Parameters).ensureType();

    if parameters is error {
        return r4:createFHIRError(parameters.message(), r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_BAD_REQUEST);
    } else {
        return getByIdQuestionnairePackage("32");
    }
}

public isolated function getByIdQuestionnairePackage(string id) returns r4:FHIRError|international401:Parameters {
    lock {
        foreach var item in parameters {
            string result = item.id ?: "";

            if result == id {
                return item.clone();
            }
        }
    }
    return r4:createFHIRError(string `Cannot find a Questionnaire resource with id: ${id}`, r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_NOT_FOUND);
}

public isolated function createQuestionnaire(Questionnaire payload) returns r4:FHIRError|Questionnaire {
    Questionnaire|error questionnaire = parser:parseWithValidation(payload.toJson(), davincidtr210:DTRStdQuestionnaire).ensureType();

    if questionnaire is error {
        return r4:createFHIRError(questionnaire.message(), r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_BAD_REQUEST);
    } else {
        lock {
            createOperationNextIdQuestionnaire = createOperationNextIdQuestionnaire + 1;
            questionnaire.id = (createOperationNextIdQuestionnaire).toBalString();
        }

        lock {
            questionnaires.push(questionnaire.clone());
        }

        return questionnaire;
    }
}

public isolated function getByIdQuestionnaire(string id) returns r4:FHIRError|Questionnaire {
    lock {
        foreach var item in questionnaires {
            string result = item.id ?: "";

            if result == id {
                return item.clone();
            }
        }
    }
    return r4:createFHIRError(string `Cannot find a Questionnaire resource with id: ${id}`, r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_NOT_FOUND);
}

public isolated function updateQuestionnaire(json payload) returns r4:FHIRError|fhir:FHIRResponse {
    return r4:createFHIRError("Not implemented", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);

}

public isolated function patchResourceQuestionnaire(string 'resource, string id, json payload) returns r4:FHIRError|fhir:FHIRResponse {
    return r4:createFHIRError("Not implemented", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
}

public isolated function deleteQuestionnaire(string 'resource, string id) returns r4:FHIRError|fhir:FHIRResponse {
    return r4:createFHIRError("Not implemented", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);

}

public isolated function searchQuestionnaire(string 'resource, map<string[]>? searchParameters = ()) returns r4:FHIRError|r4:Bundle {
    r4:Bundle bundle = {
        'type: "collection"
    };

    if searchParameters is map<string[]> {
        if searchParameters.keys().length() == 1 {
            lock {
                r4:BundleEntry[] bundleEntries = [];
                foreach var item in questionnaires {
                    r4:BundleEntry bundleEntry = {
                        'resource: item
                    };
                    bundleEntries.push(bundleEntry);
                }
                r4:Bundle BundleClone = bundle.clone();
                BundleClone.entry = bundleEntries;
                return BundleClone.clone();
            }
        }

        foreach var 'key in searchParameters.keys() {
            match 'key {
                "_id" => {
                    Questionnaire byId = check getByIdQuestionnaire(searchParameters.get('key)[0]);
                    bundle.entry = [
                        {
                            'resource: byId
                        }
                    ];
                    return bundle;
                }
                _ => {
                    return r4:createFHIRError(string `Not supported search parameter: ${'key}`, r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
                }
            }
        }
    }

    return bundle;
}

function loadQuestionnairePackageData() returns error? {
    lock {
        json questionnaireJson = {
            "resourceType": "Parameters",
            "id": "32",
            "parameter": [
                {
                    "name": "PackageBundle",
                    "resource": {
                        "resourceType": "Bundle",
                        "type": "collection",
                        "entry": [
                            {
                                "resourceType": "Questionnaire",
                                "id": "4",
                                "meta": {
                                    "profile": [
                                        "http://hl7.org/fhir/us/davinci-dtr/StructureDefinition/dtr-std-questionnaire"
                                    ]
                                },
                                "text": {
                                    "id": "text1",
                                    "status": "generated",
                                    "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Prior Authorization Questionnaire for Aimovig 70 mg Injection</div>"
                                },
                                "url": "http://example.org/fhir/Questionnaire/aimovig-prior-auth",
                                "version": "1.0.0",
                                "status": "active",
                                "title": {
                                    "value": "Prior Authorization Questionnaire"
                                },
                                "publisher": "Example Payer Organization",
                                "subjectType": ["Patient"],
                                "extension": [
                                    {
                                        "url": "http://hl7.org/fhir/us/davinci-dtr/StructureDefinition/extension-purposeOfUse",
                                        "valueCodeableConcept": {
                                            "coding": [
                                                {
                                                    "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
                                                    "code": "COVAUTH",
                                                    "display": "Coverage Authorization"
                                                }
                                            ],
                                            "text": "Coverage Authorization"
                                        }
                                    },
                                    {
                                        "url": "http://hl7.org/fhir/StructureDefinition/cqf-library",
                                        "valueCanonical": "http://example.org/fhir/Library/AimovigPriorAuthLibrary"
                                    }
                                ],
                                "item": [
                                    {
                                        "linkId": "1",
                                        "text": {"value": "Has the patient been diagnosed with chronic migraines?"},
                                        "type": "boolean"
                                    },
                                    {
                                        "linkId": "2",
                                        "text": {"value": "Has the patient tried other preventive migraine treatments?"},
                                        "type": "boolean"
                                    },
                                    {
                                        "linkId": "3",
                                        "text": {"value": "Please list previous medications used for migraine prevention."},
                                        "type": "display"
                                    },
                                    {
                                        "linkId": "4",
                                        "text": {"value": "What is the frequency of migraines per month?"},
                                        "type": "integer"
                                    },
                                    {
                                        "linkId": "5",
                                        "text": {"value": "Has the patient experienced side effects or lack of effectiveness with prior treatments?"},
                                        "type": "boolean"
                                    },
                                    {
                                        "linkId": "6",
                                        "text": {"value": "Does the patient have any contraindications to other migraine medications?"},
                                        "type": "boolean"
                                    },
                                    {
                                        "linkId": "7",
                                        "text": {"value": "Does the patient have insurance coverage for Aimovig?"},
                                        "type": "boolean"
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        };

        international401:Parameters package = check parser:parse(questionnaireJson, international401:Parameters).ensureType();
        parameters.push(package);
    }
}

function loadQuestionnaireData() returns error? {
    lock {
        json questionnaireJson = {
            "resourceType": "Questionnaire",
            "id": "4",
            "meta": {
                "profile": [
                    "http://hl7.org/fhir/us/davinci-dtr/StructureDefinition/dtr-std-questionnaire"
                ]
            },
            "text": {
                "id": "text1",
                "status": "generated",
                "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\">Prior Authorization Questionnaire for Aimovig 70 mg Injection</div>"
            },
            "url": "http://example.org/fhir/Questionnaire/aimovig-prior-auth",
            "version": "1.0.0",
            "status": "active",
            "title": {
                "value": "Prior Authorization Questionnaire"
            },
            "publisher": "Example Payer Organization",
            "subjectType": ["Patient"],
            "extension": [
                {
                    "url": "http://hl7.org/fhir/us/davinci-dtr/StructureDefinition/extension-purposeOfUse",
                    "valueCodeableConcept": {
                        "coding": [
                            {
                                "system": "http://terminology.hl7.org/CodeSystem/v3-ActReason",
                                "code": "COVAUTH",
                                "display": "Coverage Authorization"
                            }
                        ],
                        "text": "Coverage Authorization"
                    }
                },
                {
                    "url": "http://hl7.org/fhir/StructureDefinition/cqf-library",
                    "valueCanonical": "http://example.org/fhir/Library/AimovigPriorAuthLibrary"
                }
            ],
            "item": [
                {
                    "linkId": "1",
                    "text": {"value": "Has the patient been diagnosed with chronic migraines?"},
                    "type": "boolean"
                },
                {
                    "linkId": "2",
                    "text": {"value": "Has the patient tried other preventive migraine treatments?"},
                    "type": "boolean"
                },
                {
                    "linkId": "3",
                    "text": {"value": "Please list previous medications used for migraine prevention."},
                    "type": "display"
                },
                {
                    "linkId": "4",
                    "text": {"value": "What is the frequency of migraines per month?"},
                    "type": "integer"
                },
                {
                    "linkId": "5",
                    "text": {"value": "Has the patient experienced side effects or lack of effectiveness with prior treatments?"},
                    "type": "boolean"
                },
                {
                    "linkId": "6",
                    "text": {"value": "Does the patient have any contraindications to other migraine medications?"},
                    "type": "boolean"
                },
                {
                    "linkId": "7",
                    "text": {"value": "Does the patient have insurance coverage for Aimovig?"},
                    "type": "boolean"
                }
            ]
        };

        davincidtr210:DTRStdQuestionnaire questionnaire = check parser:parse(questionnaireJson, davincidtr210:DTRStdQuestionnaire).ensureType();
        questionnaires.push(questionnaire);
    }

}
