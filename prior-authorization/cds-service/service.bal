// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
// This file is auto-generated by Ballerina.

import ballerina/http;
import ballerinax/health.fhir.cds;

configurable string EHR_DTR_APP_LINK = ?;

service http:InterceptableService /cds\-services on new http:Listener(9090) {

    public function createInterceptors() returns [RequestInterceptor, ResponseErrorInterceptor] {
        return [new RequestInterceptor(), new ResponseErrorInterceptor()];
    }

    # Discovery endpoint.
    #
    # + return - return CDS hook definition
    isolated resource function get .() returns http:Response {
        http:Response response = new ();
        if (cds:cds_services.count() > 0) {
            cds:Services services = {services: cds:cds_services};
            response.setJsonPayload(services);
        } else {
            response.setJsonPayload([]);
        }
        return response;
    }

    # Service endpoint.
    #
    # + hook_id - Registered id of the hook being invoked
    # + cdsRequest - cds request payload
    # + return - Clinical decisions as array of CDS cards
    isolated resource function post [string hook_id](@http:Payload cds:CdsRequest cdsRequest) returns http:Response {
        //Connect with decision support system implementation
        cds:CdsResponse|cds:CdsError cdsResponse = submitForDecision(hook_id, cdsRequest);
        return postProcessing(cdsResponse);
    }

    # Feedback endpoint.
    #
    # + hook_id - Registered id of the hook being invoked
    # + feedback - cds feedback payload
    # + return - return success message
    isolated resource function post [string hook_id]/feedback(@http:Payload cds:Feedbacks feedback) returns http:Response {
        //Connect with feedback system implementation
        cds:CdsError? result = submitFeedback(hook_id, feedback);
        return postProcessing(result);
    }
}

# This method acts like an interface to route the request appropriate decision support
# connection methods.
#
# + hookId - Id of the hook being invoked.
# + cdsRequest - CdsRequest to sent to the backend.
# + return - return CdsResponse or CdsError.
isolated function submitForDecision(string hookId, cds:CdsRequest cdsRequest) returns cds:CdsResponse|cds:CdsError {
    match (hookId) {
        "prescribe-medication" => {
            return connectDecisionSystemForPrescribeMedication(cdsRequest, hookId);
        }
        "radiology" => {
            return connectDecisionSystemForRadiology(cdsRequest, hookId);
        }
        "radiology-order" => {
            return connectDecisionSystemForRadiologyOrder(cdsRequest, hookId);
        }
    }

    string message = string `Can not find a cds service with the name: ${hookId}`;
    int statusCode = 404;
    cds:CdsError cdsError = cds:createCdsError(message, statusCode);
    return cdsError;
}

# This method acts like an interface to route the feedback request appropriate feedback
# connection methods.
#
# + hookId - id of the hook being invoked.
# + feedback - Feedback record to be processed.
# + return - return CdsError, if any.
isolated function submitFeedback(string hookId, cds:Feedbacks feedback) returns cds:CdsError? {
    match (hookId) {
        "prescribe-medication" => {
            return connectFeedbackSystemForPrescribeMedication(feedback, hookId);
        }
        "radiology" => {
            return connectFeedbackSystemForRadiology(feedback, hookId);
        }
        "radiology-order" => {
            return connectFeedbackSystemForRadiologyOrder(feedback, hookId);
        }
    }

    string message = string `Can not find a cds service with the name: ${hookId}`;
    int statusCode = 404;
    cds:CdsError cdsError = cds:createCdsError(message, statusCode);
    return cdsError;
}
