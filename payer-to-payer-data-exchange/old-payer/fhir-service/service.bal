// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.
// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.
import ballerina/http;
import ballerina/log;
import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhirr4;
import ballerinax/health.fhir.r4.davincihrex100;
import ballerinax/health.fhir.r4.davincipas;
import ballerinax/health.fhir.r4.international401;
import ballerinax/health.fhir.r4.parser;
import ballerinax/health.fhir.r4.uscore501;

// ######################################################################################################################
// # Patient API                                                                                                        #
// ###################################################################################################################### 

// configurable string client_id = ?;
// configurable string client_secret = ?;
configurable string exportServiceUrl = ?;

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Patient r4:Patient|<other_Patient_Profile>;
public type Patient uscore501:USCorePatientProfile|international401:Patient;

final DemoFHIRMemberMatcher fhirMemberMatcher = check new ();

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/Patient on new fhirr4:Listener(9090, patientApiConfig) {

    //Member Match implementation
    isolated resource function post \$member\-match(r4:FHIRContext context,
            davincihrex100:HRexMemberMatchRequestParameters parameters)
            returns davincihrex100:HRexMemberMatchResponseParameters|r4:FHIRError {
        // Validate and extract resources from the request parameters
        davincihrex100:MemberMatchResources memberMatchResources =
                check validateAndExtractMemberMatchResources(parameters);

        log:printDebug("Member Matcher invoked");
        // Match member
        davincihrex100:MemberIdentifier memberIdentifier = check fhirMemberMatcher.matchMember(memberMatchResources);

        // Member match response profile: 
        // https://hl7.org/fhir/us/davinci-hrex/StructureDefinition-hrex-parameters-member-match-out.html
        return {
            'parameter: {
                name: "MemberIdentifier",
                valueIdentifier: {
                    'type: {
                        coding: [
                            {
                                system: "http://terminology.hl7.org/3.1.0/CodeSystem-v2-0203.html",
                                code: "MB"
                            }
                        ]
                    },
                    value: memberIdentifier
                }
            }
        };
    }

    // Implementation of the $export operation
    isolated resource function post \$export(r4:FHIRContext fhirContext, international401:Parameters parameters) returns r4:FHIRError|r4:OperationOutcome|error {

        http:Client httpClient = check new (exportServiceUrl);
        http:Response response = check httpClient->post("/api/export/Patient", parameters, {"Content-Type": "application/json", "prefer": "respond-async", "accept": "application/fhir+json"});
        string|http:HeaderNotFoundError contentLocation = response.getHeader("Content-Location");
        string statusUrl = "";
        if contentLocation is string {
            statusUrl = contentLocation;
        } else {
            return r4:createFHIRError("An error has been occured in the kick-off request. Please retry the export.", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
        string diagnosticsText = string `Your request has been accepted. You can check its status at ${statusUrl}`;
        r4:OperationOutcome kickoffResponse = {

            issue: [
                {
                    severity: "information",
                    code: "processing",
                    diagnostics: diagnosticsText
                }
            ]
        };
        fhirContext.setProperty("$Header:Content-Location", statusUrl);

        return kickoffResponse;
    }

    // Implementation of the $match operation
    isolated resource function post \$match(r4:FHIRContext fhirContext, international401:Parameters parameters) returns r4:FHIRError|r4:Bundle|error {

        // This is a dummy logic to test the connections. Todo: add relavant matching logic
        uscore501:USCorePatientProfile matchedPatient = {
            identifier: [
                {
                    use: "usual",
                    system: "",
                    value: "",
                    'type: {
                        coding: [
                            {system: "", code: ""}
                        ]
                    }
                }
            ],
            gender: "male",
            name: [
                {
                    family: "Doe",
                    given: [
                        "John",
                        "Hamilton"
                    ]
                }
            ]
        };
        r4:BundleEntry matchEntry = {
            'resource: matchedPatient,
            fullUrl: ""
        };
        r4:Bundle matchBundle = {

            'type: "searchset",
            entry: [matchEntry]
        };
        return matchBundle;
    }

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:FHIRError|uscore501:USCorePatientProfile|error {
        uscore501:USCorePatientProfile response = check getByIdPatient(id);
        return response;
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:FHIRError|error|r4:Bundle {
        r4:Bundle searchResult = check searchPatient("Patient", getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Patient patient) returns Patient|error {
        uscore501:USCorePatientProfile uSCorePatientProfile = check createPatient(patient.toJson());

        return uSCorePatientProfile;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Patient patient) returns Patient|r4:OperationOutcome|r4:FHIRError {
        fhir:FHIRResponse response = check updatePatient(patient.toJson());

        do {
            return <uscore501:USCorePatientProfile>check parser:parse(response.'resource, uscore501:USCorePatientProfile);
        } on fail error parseError {
            log:printError(string `Error occurred while parsing : ${parseError.message()}`, parseError);
            return r4:createFHIRError(parseError.message(), r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Patient|r4:OperationOutcome|r4:FHIRError {
        fhir:FHIRResponse response = check patchResourcePatient("Patient", id, patch);

        do {
            return <uscore501:USCorePatientProfile>check parser:parse(response.'resource, uscore501:USCorePatientProfile);
        } on fail error parseError {
            log:printError(string `Error occurred while parsing : ${parseError.message()}`, parseError);
            return r4:createFHIRError(parseError.message(), r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome?|r4:FHIRError? {
        _ = check deletePatient("Patient", id);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Claim API                                                                                                          #
// ###################################################################################################################### 

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Claim r4:Claim|<other_Claim_Profile>;
public type Claim davincipas:PASClaim;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/Claim on new fhirr4:Listener(9091, claimApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return getByIdClaim(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return searchClaim(queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Claim procedure) returns error|http:Response {
        davincipas:PASClaimResponse createResult = check createClaim(procedure);
        http:Response response = new;
        response.setJsonPayload(createResult.toJson());
        return response;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Claim claim) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Claim|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Coverage API                                                                                                       #
// ###################################################################################################################### 

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Coverage r4:Coverage|<other_Coverage_Profile>;
public type Coverage international401:Coverage;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/Coverage on new fhirr4:Listener(9092, coverageApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return getByIdCoverge(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return searchCoverage(queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Coverage coverage) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return createCoverge(coverage);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Coverage coverage) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Coverage|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Diagnostic Report API                                                                                              #
// ######################################################################################################################

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type DiagnosticReport r4:DiagnosticReport|<other_DiagnosticReport_Profile>;
public type DiagnosticReport uscore501:USCoreDiagnosticReportProfileNoteExchange|uscore501:USCoreDiagnosticReportProfileLaboratoryReporting|international401:DiagnosticReport;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/DiagnosticReport on new fhirr4:Listener(9093, diagnosticReportApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns r4:FHIRError|international401:DiagnosticReport {
        return getByIdDiagnosticReport(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return searchDiagnosticReport(queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, DiagnosticReport procedure) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, DiagnosticReport diagnosticreport) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns DiagnosticReport|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

// ######################################################################################################################
// # Encounter API                                                                                                      #
// ######################################################################################################################

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Encounter r4:Encounter|<other_Encounter_Profile>;
public type Encounter uscore501:USCoreEncounterProfile|international401:Encounter;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service /fhir/r4/Encounter on new fhirr4:Listener(9094, encounterApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return getByIdEncounter(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return searchEncounter(queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Encounter procedure) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Encounter encounter) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}
